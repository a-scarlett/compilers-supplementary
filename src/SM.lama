-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@{stack@{stack1, stack2}, state, w@{input@{input1, input2}, output@{output1, output2}}}, insns@{a, b}) {
  case a of
  READ      ->  {stack+++input1, state , { s6, s4}}
  | WRITE     -> {{stack1, stack2}, state , { s6, s4}}
  | BINOP (s) -> 
  | LD    (x) -> {{st1+++input1, stack2}, state , { s6, s4}}
  | ST    (x) -> { stack2, state <-{x, st}, w}
  | CONST (n) -> {{stack+++{n}, stack2}, state, w}
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  failure ("compileExpr not implemented\n")
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  failure ("compileSM not implemented\n")
}
